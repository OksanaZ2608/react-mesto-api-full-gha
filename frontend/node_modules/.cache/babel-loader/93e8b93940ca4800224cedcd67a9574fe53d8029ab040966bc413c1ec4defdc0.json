{"ast":null,"code":"class Auth {\n  constructor(options) {\n    this._url = options.url;\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  registerUser(password, email) {\n    return fetch(`${this._url}/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        password,\n        email\n      })\n    }).then(res => this._checkResponse(res));\n  }\n  authorizeUser(password, email) {\n    return fetch(`${this._url}/signin`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        password,\n        email\n      })\n    }).then(res => this._checkResponse(res));\n  }\n  checkToken(token) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    }).then(res => this._checkResponse(res));\n  }\n}\nconst auth = new Auth({\n  //url: 'https://api.domainoksana.nomoredomainsrocks.ru'\n  url: 'http://localhost:3030'\n});\nexport default auth;","map":{"version":3,"names":["Auth","constructor","options","_url","url","_checkResponse","res","ok","json","Promise","reject","status","registerUser","password","email","fetch","method","headers","body","JSON","stringify","then","authorizeUser","checkToken","token","auth"],"sources":["/Users/oksanazagorodneva/react-mesto-api-full-gha/frontend/src/utils/auth.js"],"sourcesContent":["class Auth {\n  constructor(options) {\n    this._url = options.url;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  registerUser(password, email) {\n    return fetch(`${this._url}/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ password, email })\n    })\n    .then((res) => this._checkResponse(res));\n  }\n\n  authorizeUser(password, email) {\n    return fetch(`${this._url}/signin`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ password, email })\n    })\n    .then((res) => this._checkResponse(res));\n  }\n\n  checkToken(token) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    })\n    .then((res) => this._checkResponse(res));\n  }\n}\n\nconst auth = new Auth({\n  //url: 'https://api.domainoksana.nomoredomainsrocks.ru'\n  url: 'http://localhost:3030'\n})\n\nexport default auth;"],"mappings":"AAAA,MAAMA,IAAI,CAAC;EACTC,WAAWA,CAACC,OAAO,EAAE;IACnB,IAAI,CAACC,IAAI,GAAGD,OAAO,CAACE,GAAG;EACzB;EAEAC,cAAcA,CAACC,GAAG,EAAE;IAClB,IAAIA,GAAG,CAACC,EAAE,EAAE;MACV,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;IACnB;IACA,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;EAChD;EAEAC,YAAYA,CAACC,QAAQ,EAAEC,KAAK,EAAE;IAC5B,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACZ,IAAK,SAAQ,EAAE;MAClCa,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP,QAAQ;QAAEC;MAAM,CAAC;IAC1C,CAAC,CAAC,CACDO,IAAI,CAAEf,GAAG,IAAK,IAAI,CAACD,cAAc,CAACC,GAAG,CAAC,CAAC;EAC1C;EAEAgB,aAAaA,CAACT,QAAQ,EAAEC,KAAK,EAAE;IAC7B,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACZ,IAAK,SAAQ,EAAE;MAClCa,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP,QAAQ;QAAEC;MAAM,CAAC;IAC1C,CAAC,CAAC,CACDO,IAAI,CAAEf,GAAG,IAAK,IAAI,CAACD,cAAc,CAACC,GAAG,CAAC,CAAC;EAC1C;EAEAiB,UAAUA,CAACC,KAAK,EAAE;IAChB,OAAOT,KAAK,CAAE,GAAE,IAAI,CAACZ,IAAK,WAAU,EAAE;MACpCa,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASO,KAAM;MACnC;IACF,CAAC,CAAC,CACDH,IAAI,CAAEf,GAAG,IAAK,IAAI,CAACD,cAAc,CAACC,GAAG,CAAC,CAAC;EAC1C;AACF;AAEA,MAAMmB,IAAI,GAAG,IAAIzB,IAAI,CAAC;EACpB;EACAI,GAAG,EAAE;AACP,CAAC,CAAC;AAEF,eAAeqB,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}