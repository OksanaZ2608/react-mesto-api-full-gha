{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._url = options.url;\n    this._headers = options.headers;\n    // this._authorization = options.headers.authorization;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  getUserInfo() {\n    const token = localStorage.getItem(\"token\");\n    return fetch(`${this._url}/users/me`, {\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  }\n  getInitialCards() {\n    const token = localStorage.getItem(\"token\");\n    return fetch(`${this._url}/cards`, {\n      method: 'GET',\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  }\n  setUserInfo(name, about) {\n    const token = localStorage.getItem(\"token\");\n    return fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name,\n        about\n      })\n    }).then(this._checkResponse);\n  }\n  addNewCard(name, link) {\n    const token = localStorage.getItem(\"token\");\n    return fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: {\n        \"content-type\": \"application/json\",\n        authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(this._checkResponse);\n  }\n  getLikes() {\n    const token = localStorage.getItem(\"token\");\n    return fetch(`${this._url}/cards`, {\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  }\n  deleteCard(cardId) {\n    const token = localStorage.getItem(\"token\");\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  }\n  addLike(cardId) {\n    const token = localStorage.getItem(\"token\");\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  }\n  deleteLike(cardId) {\n    const token = localStorage.getItem(\"token\");\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  }\n  changeAvatar(avatar) {\n    const token = localStorage.getItem(\"token\");\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        avatar\n      })\n    }).then(this._checkResponse);\n  }\n}\nconst api = new Api({\n  //url: 'https://api.domainoksana.nomoredomainsrocks.ru'\n  url: 'http://localhost:3000'\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_url","url","_headers","headers","_checkResponse","res","ok","json","Promise","reject","status","getUserInfo","token","localStorage","getItem","fetch","authorization","then","getInitialCards","method","setUserInfo","name","about","body","JSON","stringify","addNewCard","link","getLikes","deleteCard","cardId","addLike","deleteLike","changeAvatar","avatar","api"],"sources":["/Users/oksanazagorodneva/react-mesto-api-full-gha/frontend/src/utils/Api.js"],"sourcesContent":["class Api {\n    constructor(options) {\n      this._url = options.url;\n      this._headers = options.headers;\n     // this._authorization = options.headers.authorization;\n    }\n  \n    _checkResponse(res) {\n      if (res.ok) {\n        return res.json();\n      }\n  \n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  \n    getUserInfo() {\n      const token = localStorage.getItem(\"token\");\n      return fetch(`${this._url}/users/me`, {\n        headers: {\n          authorization: `Bearer ${token}`,\n        },\n      })\n      .then(this._checkResponse)\n    }\n  \n    getInitialCards() {\n      const token = localStorage.getItem(\"token\");\n      return fetch(`${this._url}/cards`, {\n        method: 'GET',\n        headers: {\n          authorization: `Bearer ${token}`,\n        },\n      })\n      .then(this._checkResponse)\n    }\n  \n    setUserInfo(name, about) {\n      const token = localStorage.getItem(\"token\");\n      return fetch(`${this._url}/users/me`, {\n        method: 'PATCH',\n        headers: {\n          authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ name, about })\n      })\n      .then(this._checkResponse)\n    }\n  \n    addNewCard(name, link) {\n      const token = localStorage.getItem(\"token\");\n      return fetch(`${this._url}/cards`, {\n        method: 'POST',\n        headers: {\n          \"content-type\": \"application/json\",\n        authorization: `Bearer ${token}`,\n      },\n        body: JSON.stringify({ name, link })\n      })\n      .then(this._checkResponse)\n    }\n  \n    getLikes() {\n      const token = localStorage.getItem(\"token\");\n      return fetch(`${this._url}/cards`, {\n        headers: {\n          authorization: `Bearer ${token}`,\n        },\n      })\n      .then(this._checkResponse)\n    }\n  \n    deleteCard(cardId) {\n      const token = localStorage.getItem(\"token\");\n      return fetch(`${this._url}/cards/${cardId}`, {\n        method: 'DELETE',\n        headers: {\n          authorization: `Bearer ${token}`,\n        },\n      })\n      .then(this._checkResponse)\n    }\n  \n    addLike(cardId) {\n      const token = localStorage.getItem(\"token\");\n      return fetch(`${this._url}/cards/${cardId}/likes`, {\n        method: 'PUT',\n        headers: {\n          authorization: `Bearer ${token}`,\n        },\n      })\n      .then(this._checkResponse)\n    }\n  \n    deleteLike(cardId) {\n      const token = localStorage.getItem(\"token\");\n      return fetch(`${this._url}/cards/${cardId}/likes`, {\n        method: 'DELETE',\n        headers: {\n          authorization: `Bearer ${token}`,\n        },\n      })\n      .then(this._checkResponse)\n    }\n  \n    changeAvatar(avatar) {\n      const token = localStorage.getItem(\"token\");\n      return fetch(`${this._url}/users/me/avatar`, {\n        method: 'PATCH',\n        headers: {\n          authorization: `Bearer ${token}`,\n        },   \n        body: JSON.stringify({avatar})\n      })\n      .then(this._checkResponse)\n    }  \n  }\n\nconst api = new Api({\n    //url: 'https://api.domainoksana.nomoredomainsrocks.ru'\n    url: 'http://localhost:3000'\n});\n\nexport default api;"],"mappings":"AAAA,MAAMA,GAAG,CAAC;EACNC,WAAWA,CAACC,OAAO,EAAE;IACnB,IAAI,CAACC,IAAI,GAAGD,OAAO,CAACE,GAAG;IACvB,IAAI,CAACC,QAAQ,GAAGH,OAAO,CAACI,OAAO;IAChC;EACD;;EAEAC,cAAcA,CAACC,GAAG,EAAE;IAClB,IAAIA,GAAG,CAACC,EAAE,EAAE;MACV,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;IACnB;IAEA,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;EAChD;EAEAC,WAAWA,CAAA,EAAG;IACZ,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACf,IAAK,WAAU,EAAE;MACpCG,OAAO,EAAE;QACPa,aAAa,EAAG,UAASJ,KAAM;MACjC;IACF,CAAC,CAAC,CACDK,IAAI,CAAC,IAAI,CAACb,cAAc,CAAC;EAC5B;EAEAc,eAAeA,CAAA,EAAG;IAChB,MAAMN,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACf,IAAK,QAAO,EAAE;MACjCmB,MAAM,EAAE,KAAK;MACbhB,OAAO,EAAE;QACPa,aAAa,EAAG,UAASJ,KAAM;MACjC;IACF,CAAC,CAAC,CACDK,IAAI,CAAC,IAAI,CAACb,cAAc,CAAC;EAC5B;EAEAgB,WAAWA,CAACC,IAAI,EAAEC,KAAK,EAAE;IACvB,MAAMV,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACf,IAAK,WAAU,EAAE;MACpCmB,MAAM,EAAE,OAAO;MACfhB,OAAO,EAAE;QACPa,aAAa,EAAG,UAASJ,KAAM;MACjC,CAAC;MACDW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEJ,IAAI;QAAEC;MAAM,CAAC;IACtC,CAAC,CAAC,CACDL,IAAI,CAAC,IAAI,CAACb,cAAc,CAAC;EAC5B;EAEAsB,UAAUA,CAACL,IAAI,EAAEM,IAAI,EAAE;IACrB,MAAMf,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACf,IAAK,QAAO,EAAE;MACjCmB,MAAM,EAAE,MAAM;MACdhB,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QACpCa,aAAa,EAAG,UAASJ,KAAM;MACjC,CAAC;MACCW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEJ,IAAI;QAAEM;MAAK,CAAC;IACrC,CAAC,CAAC,CACDV,IAAI,CAAC,IAAI,CAACb,cAAc,CAAC;EAC5B;EAEAwB,QAAQA,CAAA,EAAG;IACT,MAAMhB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACf,IAAK,QAAO,EAAE;MACjCG,OAAO,EAAE;QACPa,aAAa,EAAG,UAASJ,KAAM;MACjC;IACF,CAAC,CAAC,CACDK,IAAI,CAAC,IAAI,CAACb,cAAc,CAAC;EAC5B;EAEAyB,UAAUA,CAACC,MAAM,EAAE;IACjB,MAAMlB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACf,IAAK,UAAS8B,MAAO,EAAC,EAAE;MAC3CX,MAAM,EAAE,QAAQ;MAChBhB,OAAO,EAAE;QACPa,aAAa,EAAG,UAASJ,KAAM;MACjC;IACF,CAAC,CAAC,CACDK,IAAI,CAAC,IAAI,CAACb,cAAc,CAAC;EAC5B;EAEA2B,OAAOA,CAACD,MAAM,EAAE;IACd,MAAMlB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACf,IAAK,UAAS8B,MAAO,QAAO,EAAE;MACjDX,MAAM,EAAE,KAAK;MACbhB,OAAO,EAAE;QACPa,aAAa,EAAG,UAASJ,KAAM;MACjC;IACF,CAAC,CAAC,CACDK,IAAI,CAAC,IAAI,CAACb,cAAc,CAAC;EAC5B;EAEA4B,UAAUA,CAACF,MAAM,EAAE;IACjB,MAAMlB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACf,IAAK,UAAS8B,MAAO,QAAO,EAAE;MACjDX,MAAM,EAAE,QAAQ;MAChBhB,OAAO,EAAE;QACPa,aAAa,EAAG,UAASJ,KAAM;MACjC;IACF,CAAC,CAAC,CACDK,IAAI,CAAC,IAAI,CAACb,cAAc,CAAC;EAC5B;EAEA6B,YAAYA,CAACC,MAAM,EAAE;IACnB,MAAMtB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACf,IAAK,kBAAiB,EAAE;MAC3CmB,MAAM,EAAE,OAAO;MACfhB,OAAO,EAAE;QACPa,aAAa,EAAG,UAASJ,KAAM;MACjC,CAAC;MACDW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACS;MAAM,CAAC;IAC/B,CAAC,CAAC,CACDjB,IAAI,CAAC,IAAI,CAACb,cAAc,CAAC;EAC5B;AACF;AAEF,MAAM+B,GAAG,GAAG,IAAItC,GAAG,CAAC;EAChB;EACAI,GAAG,EAAE;AACT,CAAC,CAAC;AAEF,eAAekC,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}